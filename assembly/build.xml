<!-- In order for this build file to be referenced by name on import into other build files, 
     it's much nicer to have a short name with no spaces. Please don't change it. -->
<project name="Kettle CE Assembly" basedir="." default="dist" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- =================================================================================
       Property Defaults
       Any of these properties can be overridden in either assembly.properties or override.properties
       =================================================================================-->

  <!-- Load the properties files in the proper order -->
  <property file="override.properties"
            description="Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="build.properties"
            description="Properties customized for your particular project belong in this file." />
  
  <!-- the impl properties are used to create the manifest file -->
  <property name="impl.title" value="Kettle" />
  <property name="impl.version" value="${project.revision}" />
  <property name="impl.vendor" value="Pentaho Corporation" />
  
  <!-- override the default package-ivy.xml defined in common subfloor.pkg -->
    <property name="package.artifact.ivyfile"
              value="ivy.xml"
              description="The ivy file defining dependencies of the package" />
  

  <import file="build-res/subfloor-pkg.xml" />
	
  <target name="dist" depends="init,resolve,resolve-swtlibs,resolve-launcher,resolve-plugins,resolve-dataservice-jdbc,resolve-pentaho-system,package" description="Builds and packages the application"/>
  	
  <target name="assemble-full" depends="init,resolve-all,assemble-plugins,assemble,assemble-dataservice-jdbc" description="Builds the application" />
	
  <target name="assemble-no-plugins" depends="init,resolve-all,assemble" description="Builds the application" />

  <target name="resolve-all" depends="init,resolve,resolve-swtlibs,resolve-launcher,resolve-plugins,resolve-dataservice-jdbc,resolve-pentaho-system"/>

  <property name="system.dir" value="${stage.dir}/${package.root.dir}/system" />

  <target name="resolve-pentaho-system" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="pentaho-system" />
    <ivy:retrieve conf="pentaho-system" pattern="${system.dir}/[module].[ext]" />
    <for param="system">
      <path id="system-list">
        <fileset dir="${system.dir}">
          <include name="*.zip"/>
        </fileset>
      </path>
      <sequential>
        <unzip src="@{system}" dest="${system.dir}" overwrite="true"/>
        <delete file="@{system}"/>
      </sequential>
    </for>
    <move file="${system.dir}/pentaho-karaf-assembly" tofile="${system.dir}/karaf" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
	target: resolve-oss-licenses
  - - - - - - - - - - - - - - - - - -->
  <target name="resolve-oss-licenses" depends="install-ivy">
	 <ivy:resolve file="${ivyfile}" conf="oss-licenses" />
     <ivy:retrieve conf="oss-licenses" pattern="${bin.dir}/[module].[ext]" />
  </target>
	
  <target name="assemble" depends="resolve-swtlibs,resolve-oss-licenses,create-sampledb-from-sql,subfloor-pkg.assemble"
          description="copy jar files to distribution directory">
    <echo>Construct the distribution package...</echo>
    <!-- make JavaApplicationStub executable for OSX -->
    <chmod file="${approot.stage.dir}/Data Integration.app/Contents/MacOS/JavaApplicationStub" perm="ugo+rx"/>
  	<!-- insert version info into the canned info.plist -->
  	<replace file = "${approot.stage.dir}/Data Integration.app/Contents/Info.plist" token="@KETTLE_VERSION_STRING@" value="${dependency.kettle.revision}" />
  	<!-- Remove the SWT JAR used for compilation -->
  	<delete quiet="true">
  		<fileset dir="${approot.stage.dir}/lib" includes="swt*.jar" />
  	</delete>
  	
    <antcall target="unzip-swtlibs"/>
    
    <!-- Insert launcher revision number into batch files -->
    <replace dir="${approot.stage.dir}">
      <include name="**/*.bat"/>
    	<include name="**/*.sh"/>
    	<include name="**/*.plist"/>
      <replacefilter token="launcher.jar" value="pentaho-application-launcher-${dependency.launcher.revision}.jar"/>     
    </replace>
  	
    <replace dir="${approot.stage.dir}">
      <include name="*.bat"/>
      <include name="*.sh"/>
      <replacefilter token="@KETTLE_VERSION_STRING@" value="${dependency.kettle.revision}"/>     
    </replace>
  	
    <unzip src="${bin.dir}/oss-licenses.zip" dest="${approot.stage.dir}">
      <patternset>
        <include name="${oss-license.filename}"/>
      </patternset>
    </unzip>
  	
  	<chmod perm="a+x" dir="${approot.stage.dir}" includes="**/*.sh" />
  </target>
	
  <!--=======================================================================
      assemble-plugins
          
      Unzips the non-core plugin packages into the distribution area. 
    ====================================================================-->	
  <target name="assemble-plugins" depends="install-antcontrib,resolve-plugins" description="Unzip plugins to distribution directory">
    
  	<for param="plugin">
  	<path id="plugin-list">
  	  <fileset dir="${plugins.dir}">
  		<include name="*.zip"/>
  	  </fileset>
  	</path>
  	 <sequential>
  	 	<unzip src="@{plugin}" dest="${stage.dir}/${package.root.dir}/plugins" overwrite="true"/>
  	 </sequential>
  	</for>
    
    <delete dir="${plugins.dir}"/>
  </target>

  <target name="assemble-dataservice-jdbc" depends="install-antcontrib,resolve-dataservice-jdbc" >

    <copy todir="${stage.dir}/${package.root.dir}/Data Service JDBC Driver">
      <fileset dir="${dataservice-jdbc.dir}" />
    </copy>
    <delete dir="${dataservice-jdbc.dir}"/>
  </target>
	
	<!--=======================================================================
	      publish-local
	      
	      Builds and publishes the jar file for this project to the user's 
	      local repository for download by other projects currently being 
	      executed on the user's system.
	      ====================================================================-->
	  <target name="publish-local"
	          depends="assemble-full, package-zip, publish-local-nojar"
	          description="Builds and publishes the jar file to the local repository">
	  </target>


	  <!--=======================================================================
	        publish
	    
	        Creates and publishes the jar file for this project to a Maven2 
	        repository. 
	        ====================================================================-->
	 <target name="publish"
	         depends="assemble-full, package-zip, publish-nojar"
	         description="Builds and publishes the jar file to the local repository">
	 </target>
  
  <!-- Differs from subfloor by publishing the zip instead of jar --> 
  <target name="publish-nojar.internal" depends="install-antcontrib,create-pom,ivy.deliver">
    <antcall target="maven-publish-dependencies">
      <param name="publish.groupId" value="${ivy.artifact.group}" />
      <param name="publish.artifactId" value="${ivy.artifact.id}" />
      <param name="publish.version" value="${project.revision}" />
      <param name="publish.file" value="${ivy.artifact.ivypathname}" />
    </antcall>

    <if>
      <equals arg1="${source.publish}" arg2="true" />
        <then>
          <antcall target="maven-publish-sources">
            <param name="publish.groupId" value="${ivy.artifact.group}" />
            <param name="publish.artifactId" value="${ivy.artifact.id}" />
            <param name="publish.version" value="${project.revision}" />
            <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-${project.revision}-sources.jar" />
          </antcall>
        </then>
    </if>

    <antcall target="maven-publish-artifact">
      <param name="publish.pomFile" value="${ivy.artifact.pomfile}" />
      <param name="publish.file" value="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip" />
    </antcall>

    <antcall target="maven-publish.post"/>
    
  </target>
    
          
	<!--=======================================================================
        resolve-swtlibs
        
        Resolved the swtlibs configuration from ivy.xml
    =====================================================================-->
  <target name="resolve-swtlibs" depends="install-ivy">
    <delete dir="${swtlib.dir}" />
    <ivy:resolve file="${ivyfile}" conf="test" />
    <ivy:retrieve conf="swtlibs" pattern="${swtlib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>

  <target name="package.lib" depends="resolve">
    <jar jarfile="dist/${lib.zip.filename}" basedir="lib" />
  </target>	

  <target name="resolve-launcher" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="launcher" />
    <ivy:retrieve conf="launcher" pattern="${stage.dir}/${package.root.dir}/launcher/[module]-[revision](-[classifier]).[ext]" />
  </target>

  <target name="resolve-plugins" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="plugins" />
    <ivy:retrieve conf="plugins" pattern="${plugins.dir}/[module]-[revision](-[classifier]).[ext]" sync="true" />
  </target>

  <target name="resolve-dataservice-jdbc" depends="install-ivy">
    <ivy:resolve file="${ivyfile}" conf="dataservice-jdbc" />
    <ivy:retrieve conf="dataservice-jdbc" pattern="${dataservice-jdbc.dir}/[module]-[revision](-[classifier]).[ext]" sync="true" />
  </target>

  
  <target name="unzip-swtlibs">
	<!-- Unzip the libswt package into the libswt folder of the distribution -->
    <unzip dest="${approot.stage.dir}" overwrite="true">
      <fileset dir="${swtlib.dir}">
        <include name="**/*.zip"/>
      </fileset>
    </unzip>
  </target>

  <target name="create-sampledb-from-sql">
    <property name="samples.db.dir" value="${package.resdir}/samples/db"/>
    <echo message="${samples.db.dir}"/>
    <property file="${samples.db.dir}/sampledb.init.properties"/>
    <property name="db.postfix" value="db"/>
    <delete quiet="true" includeemptydirs="true">
      <dirset dir="${samples.db.dir}" includes="**/${sample.db.name}*${db.postfix}"/>
      <fileset dir="${samples.db.dir}" includes="**/${sample.db.name}*${db.postfix}"/>
    </delete>
    <echo message="${sample.db.url}${samples.db.dir}/${sample.db.name}" />
    <sql
        driver="${sample.db.driver}"
        url="${sample.db.url}${samples.db.dir}/${sample.db.name}"
        userid="${sample.db.driver}"
        password="${sample.db.password}"
        >
      <path>
        <fileset dir="${samples.db.dir}">
          <include name="**/*.sql"/>
        </fileset>
      </path>
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="**/h2*.jar"/>
        </fileset>
      </classpath>
    </sql>
  </target>
</project>
