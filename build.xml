<project name="Kettle" default="default" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    Kettle build file
  </description>

  <tstamp prefix="start"/>

  <tstamp>
    <format property="compile.timestamp" pattern="yyyy-MM-dd HH.mm.ss"/>
  </tstamp>

  <property name="kettle.ivydist.dir"
            value="${basedir}/ivydist"
            description="Directory that hosts Jar files required to compile project source.  (IVY will populate this directory with required jars)"/>

  <property name="plugins.publish-local"
            value="true"
            description="Whether to publish plugins locally during the build process. CI should override this or call publish-local-plugins"/>

  <property name="modules.publish-local"
            value="true"
            description="Whether to publish modules locally during the build process. CI should override this"/>

  <property name="pdi.plugins.dir"
            value="${assembly.stage.pdi-client.dir}/plugins"
            description="The staging area for plugins"/>

  <property name="ivy.default.ivy.user.dir" value="${user.home}/.ivy2"/>
  <property name="ivy.local.default.root" value="${ivy.default.ivy.user.dir}/local"/>


  <!-- Look for user-override properties file first -->
  <property file="override.properties"/>
  <!-- set global properties for this build -->
  <property file="build.properties"/>

  <!--Import Open Assembly ant file -->
  <import file="build-res/subfloor.xml"/>


  <!-- - - - - - - - - - - - - - - - - -
             Macro for making resolving ivy a 1 liner.  Tasks using this must depend on install-ivy.
  - - - - - - - - - - - - - - - - - -->
  <macrodef name="ivy-resolve">
    <attribute name="ivyfile" default="${ivyfile}"/>
    <attribute name="conf" default="default"/>
    <attribute name="directory"/>
    <sequential>
      <mkdir dir="@{directory}"/>
      <ivy:resolve file="@{ivyfile}" conf="@{conf}"/>
      <ivy:retrieve conf="@{conf}" pattern="@{directory}/[module]-[revision](-[classifier]).[ext]"/>
    </sequential>
  </macrodef>

  <target name="iterate-target">
    <for list="${subproject.list}" param="subproject" trim="true">
      <sequential>
        <echo message="${subproject.basedir}"/>
        <ant antfile="build.xml" dir="${subproject.basedir}/@{subproject}" inheritall="false">
          <target name="${target.name}"/>
        </ant>
      </sequential>
    </for>
  </target>

  <target name="call-for-all">
    <ant>
      <property name="subproject.list" value="${module.list}"/>
      <property name="subproject.basedir" value="."/>
      <target name="iterate-target"/>
    </ant>
    <ant>
      <property name="subproject.list" value="${plugin.list}"/>
      <property name="subproject.basedir" value="plugins"/>
      <target name="iterate-target"/>
    </ant>
  </target>

  <target name="build" depends="build-publish-modules,build-publish-plugins"/>

  <target name="clean" depends="install-antcontrib,subfloor.clean">
    <antcall target="call-for-all">
      <param name="target.name" value="clean"/>
    </antcall>
  </target>

  <target name="clean-jars" depends="install-antcontrib,subfloor.clean-jars">
    <antcall target="call-for-all">
      <param name="target.name" value="clean-jars"/>
    </antcall>
  </target>

  <target name="compile" depends="install-antcontrib">
    <antcall target="call-for-all">
      <param name="target.name" value="compile"/>
    </antcall>
  </target>

  <target name="compile-tests" depends="install-antcontrib">
    <antcall target="call-for-all">
      <param name="target.name" value="compile-tests"/>
    </antcall>
  </target>

  <target name="build-modules"
          description="Builds each Kettle plugin (in the source tree)"
          depends="install-antcontrib">
    <for list="${module.list}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" inheritall="false">
          <target name="resolve"/>
          <target name="dist"/>
        </ant>
      </sequential>
    </for>
  </target>

  <target name="build-publish-modules"
          description="Builds each Kettle module and publishes the artifacts."
          depends="install-antcontrib">

    <for list="${module.list}" param="module" trim="true">
      <sequential>
        <if>
          <equals arg1="${modules.publish-local}" arg2="true"/>
          <then>
            <ant antfile="build.xml" dir="@{module}" inheritall="false">
              <target name="build"/>
              <target name="publish-local"/>
            </ant>
          </then>
          <else>
            <ant antfile="build.xml" dir="@{module}" inheritall="false">
              <target name="build"/>
              <target name="publish"/>
            </ant>
          </else>
        </if>
      </sequential>
    </for>
  </target>

  <target name="build-plugins"
          description="Builds each Kettle plugin (in the source tree)"
          depends="install-antcontrib">
    <for list="${plugin.list}" param="plugin" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="plugins/@{plugin}" inheritall="false">
          <target name="resolve"/>
          <target name="package"/>
        </ant>
      </sequential>
    </for>
  </target>

  <target name="build-publish-plugins"
          description="Builds each Kettle module and publishes the artifacts."
          depends="install-antcontrib">

    <for list="${plugin.list}" param="plugin" trim="true">
      <sequential>
        <if>
          <equals arg1="${plugins.publish-local}" arg2="true"/>
          <then>
            <ant antfile="build.xml" dir="plugins/@{plugin}" inheritall="false">
              <target name="build"/>
              <target name="publish-local"/>
            </ant>
          </then>
          <else>
            <ant antfile="build.xml" dir="plugins/@{plugin}" inheritall="false">
              <target name="build"/>
              <target name="publish"/>
            </ant>
          </else>
        </if>
      </sequential>
    </for>
  </target>

  <!-- Distribution task for Kettle. This provides the "old" functionality of having a "dist" folder
       under Kettle root containing a runnable instance of what is now the assembly. Thus the
       approach is to perform an assembly, then move the assembly's staging area to "dist" -->
  <target name="dist" depends="build">
    <ant antfile="assembly/build.xml" inheritall="false">
      <target name="clean-all"/>
      <target name="assemble-full"/>
    </ant>
    <move todir="${distrib}">
      <fileset dir="${assembly.stage.pdi-client.dir}"/>
    </move>
  </target>

  <target name="test" depends="install-antcontrib">
    <for list="${module.list}" param="module" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="@{module}" inheritall="false">
          <target name="resolve"/>
          <target name="test"/>
        </ant>
      </sequential>
    </for>
    <for list="${plugin.list}" param="plugin" trim="true">
      <sequential>
        <ant antfile="build.xml" dir="plugins/@{plugin}" inheritall="false">
          <target name="resolve"/>
          <target name="test"/>
        </ant>
      </sequential>
    </for>
  </target>

  <!--=======================================================================
        Support pentaho-standard CI subfloor build targets

      ====================================================================-->
  <target name="build-sonar" depends="install-antcontrib,subfloor.clean">
    <antcall target="call-for-all">
      <param name="target.name" value="subfloor.build-sonar"/>
    </antcall>
  </target>

  <target name="continuous-sonar" depends="install-antcontrib,subfloor.clean">
    <antcall target="call-for-all">
      <param name="target.name" value="continuous-sonar"/>
    </antcall>
  </target>

  <target name="build-testless" depends="install-antcontrib,subfloor.clean">
    <antcall target="call-for-all">
      <param name="target.name" value="subfloor.build-testless"/>
    </antcall>
  </target>

  <target name="continuous-testless" depends="install-antcontrib,subfloor.clean">
    <antcall target="call-for-all">
      <param name="target.name" value="continuous-testless"/>
    </antcall>
  </target>



  <!--=======================================================================
        create-dot-classpath

        Creates the Eclipse .classpath file from the resolved
        classpath from Ant.
      ====================================================================-->
  <target name="create-dot-classpath"
          depends="install-pentaho-ant-tasks,resolve-init,init,resolve,update-launch-config">
    <!-- call the assembly's resolve then create-dot-classpath -->
    <ant antfile="build.xml" dir="${assembly.dir}" inheritall="false">
      <target name="resolve"/>
      <target name="resolve-swtlibs"/>
      <property name="approot.stage.dir" value="${basedir}"/>
      <target name="unzip-swtlibs"/>
    </ant>
    <copy file="classpath.template" tofile=".classpath" overwrite="true"/>
    <switch value="${os.classifier}">
      <case value="win">
        <property name="platform" value="win"/>
        <switch value="${os.arch}">
          <case value="x86">
            <property name="arch" value="32"/>
          </case>
          <default>
            <property name="arch" value="64"/>
          </default>
        </switch>
      </case>
      <case value="linux">
        <property name="platform" value="linux"/>
        <switch value="${os.arch}">
          <case value="x86">
            <property name="arch" value="/x86"/>
          </case>
          <default>
            <property name="arch" value="/x86_64"/>
          </default>
        </switch>
      </case>
      <case value="mac">
        <property name="platform" value="osx"/>
        <switch value="${os.arch}">
          <case value="x86">
            <property name="arch" value=""/>
          </case>
          <default>
            <property name="arch" value="64"/>
          </default>
        </switch>
      </case>
    </switch>
    <echo message="Including swt.jar at ${libswt}/${platform}${arch}/swt.jar"/>

    <dot-classpath>
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="*.jar"/>
          <exclude name="swt-linux*.jar"/>
          <exclude name="kettle-*.jar"/>
        </fileset>
        <fileset dir="${testlib.dir}">
          <include name="*.jar"/>
        </fileset>
        <fileset dir="${libswt}">
          <include name="${platform}${arch}/swt.jar"/>
        </fileset>
      </classpath>
    </dot-classpath>
  </target>

  <!--=======================================================================
          update-launch-config

          Creates an Eclipse launch configuration from a template using the
          project directory name as the project name, location, etc.
        ====================================================================-->
  <target name="update-launch-config" depends="install-antcontrib">
    <basename property="project.dir.name" file="${basedir}"/>
    <available file="${basedir}/${project.dir.name}.launch" property="launch.config.exists"/>
    <available file="${basedir}/project.launch" property="project-dot-launch.exists"/>
    <if>
      <and>
        <isfalse value="${launch.config.exists}"/>
        <istrue value="${project-dot-launch.exists}"/>
      </and>
      <then>
        <copy file="${basedir}/project.launch" tofile="${basedir}/${project.dir.name}.launch"/>
        <replace file="${basedir}/${project.dir.name}.launch" token="@@@" value="${project.dir.name}"/>
        <echo message="NOTE: You must restart Eclipse to enable the use of the launch configuration."/>
      </then>
      <else>
        <echo message="The launch configuration already exists, or no project.launch file exists."/>
      </else>
    </if>
  </target>

<target name="cobertura"
        description="Runs tests in an instrumented environment and produces Cobertura test coverage reports"
        depends="clean-cobertura,install-cobertura,compile-integration-tests,compile-tests,cobertura.instrument-classes,cobertura.test-instrumented,cobertura.xml-report,cobertura.html-report" />

  <!--=======================================================================
      cobertura.instrument-classes

      Instruments the application classes used by Cobertura during cobertura.test-instrumented
      ====================================================================-->
  <target name="cobertura.instrument-classes" depends="cobertura.clean-instrumented-classes,install-cobertura,compile">
    <cobertura-instrument
            todir="${instrumented.classes.dir}"
            datafile="${cobertura.data.dir}/cobertura.ser"
            maxmemory="${junit.maxmemory}"> <!-- This should be at least 2G -->
      <ignore regex="org.apache.log4j.*"/>
      <!--
        Instrument all the application classes, but
        don't instrument the test classes.
      -->
      <fileset dir="core/bin/classes" includes="**/*.class"/>
      <fileset dir="engine/bin/classes" includes="**/*.class"/>
      <!-- Omit UI classes (for coverage) as we can't feasibly test them enough
      <fileset dir="dbdialog/bin/classes" includes="**/*.class"/>
      <fileset dir="ui/bin/classes" includes="**/*.class"/>
      -->

    </cobertura-instrument>
  </target>

  <target name="cobertura.test-instrumented"
          depends="init-test-reports,install-cobertura,build-modules,cobertura.instrument-classes">
    <mkdir dir="${instrumented.classes.dir}"/>
    <path id="cobertura.classpath">
      <fileset dir="${subfloor.resources.dir}/cobertura-${cobertura.version}">
        <include name="*.jar"/>
      </fileset>
    </path>
    <!-- call build-path-dirs looking for all subprojects' class directories -->
    <antcallback target="build-path-dirs" return="build-path-dirs.return">
      <param name="subproject.list" value="${module.list}"/>
      <param name="build-path-dirs.basedir" value="bin/${classes}"/>
    </antcallback>
    <var name="module-src-class-dirs" value="${build-path-dirs.return}"/>

    <!-- call build-path-dirs looking for all subprojects' class directories -->
    <antcallback target="build-path-dirs" return="build-path-dirs.return">
      <param name="subproject.list" value="${module.list}"/>
      <param name="build-path-dirs.basedir" value="bin/test/${classes}"/>
    </antcallback>
    <var name="module-test-class-dirs" value="${build-path-dirs.return}"/>

    <!-- Build a module classpath pointing at all class directories. -->
    <path id="module-src.classpath">
      <pathelement path="${module-src-class-dirs}"/>
      <pathelement path="${module-test-class-dirs}"/>
      <pathelement location="testClasses"/>
    </path>

    <junit fork="yes"
           forkmode="${junit.forkmode}"
           dir="${basedir}/${dist.dir}"
           maxmemory="${junit.maxmemory}"
           failureProperty="test.failed"
           haltonerror="${junit.haltonerror}"
           haltonfailure="${junit.haltonfailure}">
      <sysproperty key="java.awt.headless" value="${headless.unittest}"/>

      <!-- Specify the name of the coverage data file to use. -->
      <sysproperty key="net.sourceforge.cobertura.datafile" file="${cobertura.data.dir}/cobertura.ser"/>

      <syspropertyset>
        <propertyref prefix="junit.sysprop."/>
        <mapper type="glob" from="junit.sysprop.*" to="*"/>
      </syspropertyset>

      <!--
        Note the classpath order: instrumented classes are before the
        original (uninstrumented) classes.  This is important.
      -->
      <classpath location="${instrumented.classes.dir}"/>
      <classpath refid="module-src.classpath"/>
      <classpath refid="test.classpath"/>
      <classpath refid="cobertura.classpath"/>
      <classpath>
        <fileset dir="test/libext/" includes="*.jar"/>
        <pathelement path="${dist.dir}/testfiles"/>
        <fileset dir="${dist.dir}/${lib.dir}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}/win32/" includes="*.jar *.zip"/>
      </classpath>

      <formatter type="xml"/>
      <test name="${testcase}" todir="${testreports.xml.dir}" if="testcase"/>
      <batchtest todir="${testreports.xml.dir}" unless="testcase">
        <fileset dir="core/test-src" includes="**/*Test.java"/>
        <fileset dir="engine/test-src" includes="**/*Test.java"/>
      <fileset dir="test" includes="**/*Test.java,**/*Tests.java"/>
      </batchtest>
    </junit>
  </target>

  <!--=======================================================================
      cobertura.xml-report

      Produces machine-readable xml Cobertura coverage report from results of instrumented tests
      ====================================================================-->
  <target name="cobertura.xml-report" depends="cobertura.test-instrumented">

    <cobertura-report
            destdir="${coberturareports.xml.dir}"
            datafile="${cobertura.data.dir}/cobertura.ser"
            format="xml"
            maxmemory="${junit.maxmemory}">
      <fileset dir="core/src" includes="**/*.java"/>
      <fileset dir="engine/src" includes="**/*.java"/>
      <fileset dir="dbdialog/src" includes="**/*.java"/>
      <fileset dir="ui/src" includes="**/*.java"/>
    </cobertura-report>
  </target>


  <!--=======================================================================
      cobertura.html-report

      Produces human-readable html Cobertura coverage report from results of instrumented tests
      ====================================================================-->
  <target name="cobertura.html-report" depends="cobertura.test-instrumented">
    <cobertura-report destdir="${coberturareports.html.dir}"
                      datafile="${cobertura.data.dir}/cobertura.ser"
                      format="html"
                      maxmemory="${junit.maxmemory}">
      <fileset dir="core/src" includes="**/*.java"/>
      <fileset dir="engine/src" includes="**/*.java"/>
      <fileset dir="dbdialog/src" includes="**/*.java"/>
      <fileset dir="ui/src" includes="**/*.java"/>
    </cobertura-report>
  </target>

  <target name="build-path" depends="install-antcontrib">
    <var name="build-path.return" value=""/>
    <for list="${subproject.list}" param="subproject" trim="true">
      <sequential>
        <path id="@{subproject}.path">
          <fileset dir="@{subproject}/${build-path.basedir}">
            <patternset includes="${build-path.includes}" excludes="${build-path.excludes}"/>
          </fileset>
        </path>
        <var name="build-path.return" value="${build-path.return}:${toString:@{subproject}.path}"/>
      </sequential>
    </for>
  </target>

  <target name="build-path-dirs" depends="install-antcontrib">
    <var name="build-path-dirs.return" value=""/>
    <for list="${subproject.list}" param="subproject" trim="true">
      <sequential>
        <path id="@{subproject}.path">
          <pathelement location="@{subproject}/${build-path-dirs.basedir}"/>
        </path>
        <var name="build-path-dirs.return" value="${build-path-dirs.return}:${toString:@{subproject}.path}"/>
      </sequential>
    </for>
    <echo message="build-path-dirs.return = ${build-path-dirs.return}"/>
  </target>

  <!--
    BEFORE USING : Please download JarBundler version 1.9 and unzip it in tools/libant/
    http://informagen.com/JarBundler/
  -->

  <target name="macapplication" depends="dist" description="Build OS X executable">

    <delete dir="${macdistrib}/${ant.project.name}.app"/>
    <delete>
      <fileset dir="${macdistrib}">
        <include name="*.dmg"/>
      </fileset>
    </delete>

    <taskdef name="jarbundler"
             classpath="${jarbundler.jar}"
             classname="net.sourceforge.jarbundler.JarBundler"/>
    <jarbundler dir="${macdistrib}"
                name="${ant.project.name}"
                mainclass="org.pentaho.di.ui.spoon.Spoon"
                icon="${ui}/images/spoon32.icns"
                version="${version}"
                verbose="true"
                VMOptions="${macappmaxmem} ${macappextravmoptions}"
                shortname="Spoon"
                arguments=""
                workingdirectory="$APP_PACKAGE/Contents/Resources/Java"
                jvmversion="1.5+">
      <javaproperty name="java.library.path" value="$APP_PACKAGE/Contents/Resources/Java"/>
      <jarfileset dir="${distrib}">
        <include name="${lib.dir}/*.jar"/>
        <include name="${libext}/*.jar"/>
        <include name="${libext}/**/*.jar"/>
        <include name="${libswt}/*.jar"/>
        <include name="${libswt}/osx/*.jar"/>
        <include name="${libswt}/osx/java_swt"/>
        <include name="${samples}/**/*"/>
        <include name="${docs}/**/*"/>
        <include name="README_OSX.txt"/>
        <include name="*.sh"/>
        <include name="simple-jndi/**/*"/>
        <include name="pwd/**/*"/>
        <include name="plugins/**/*"/>
        <include name="ui/*"/>
        <include name="ui/**/*"/>
      </jarfileset>
    </jarbundler>
    <!-- patch Info.plist with StartOnMainThread property need to make sure that the token is in the right place-->
    <replace file="${macdistrib}/${ant.project.name}.app/Contents/Info.plist" token="&lt;key&gt;ClassPath"
             value="&lt;key&gt;StartOnMainThread&lt;/key&gt;&lt;true/&gt; &lt;key&gt;ClassPath"/>
    <!-- Create a .dmg file containing the app and docs -->
    <echo>Creating .dmg package...</echo>
    <exec executable="/usr/bin/hdiutil" os="Mac OS X">
      <arg value="create"/>
      <arg value="-srcfolder"/>
      <arg value="${macdistrib}"/>
      <arg value="-volname"/>
      <arg value="${ant.project.name} ${version}"/>
      <arg value="-ov"/>
      <arg value="${macdistrib}/${impl.productID}-${version}.dmg"/>
    </exec>
  </target>

  <!--
       ==========================
          Compile the test code
       ==========================
  -->

  <target name="compile-integration-tests" description="compile the tests" depends="tests-stage">
    <echo>Compiling Kettle tests...</echo>
    <javac fork="true"
           srcdir="${test}"
           destdir="${testClasses}"
           target="${javac.target}"
           source="${javac.source}"
           deprecation="true"
           debug="true"
           includeantruntime="false"
           encoding="utf-8"
        >

      <classpath id="cp-kettle-test">
        <fileset dir="${dist.dir}/${lib.dir}" includes="**/*.jar"/>
        <fileset dir="${dist.dir}/plugins/kettle-gpload-plugin/" includes="*.jar"/>
        <fileset dir="${testlibext}" includes="*.jar"/>
        <fileset dir="${dist.dir}/${libswt}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}/win32/" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}" includes="common.jar"/>
      </classpath>
    </javac>
  </target>


  <target name="tests-all"
          depends="tests-clean, tests-stage, tests-core, tests-trans, tests-run, tests-blackbox, tests-concurrency"/>

  <target name="tests-stage-init" depends="init, resolve, init-tests, init-test-reports">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${dist.dir}/testfiles"/>
    <mkdir dir="${dist.dir}/test"/>
  </target>

  <target name="tests-clean">
    <delete dir="${dist.dir}/testfiles" quiet="true"/>
    <delete dir="${dist.dir}/test" quiet="true"/>
  </target>

  <target name="tests-stage" depends="tests-stage-init, dist">
    <copy todir="${dist.dir}">
      <fileset dir="${dist.dir}"/>
    </copy>
    <copy todir="${dist.dir}/testfiles">
      <fileset dir="${basedir}/testfiles"/>
    </copy>
    <copy todir="${dist.dir}/test">
      <fileset dir="${basedir}/test">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <!--
         ===========================================
            tests : junit core tests
         ============================================
    -->
  <target name="tests-core" depends="compile-integration-tests" description="Execute the core tests">

    <junit printsummary="no" dir="${basedir}/${dist.dir}" fork="yes" forkmode="perTest"
           jvm="java" maxmemory="512M" showoutput="yes">
      <classpath>
        <fileset dir="${dist.dir}/${lib.dir}" includes="kettle-core*.jar"/>
        <fileset dir="${dist.dir}/${lib.dir}" includes="kettle-engine*.jar"/>
        <fileset dir="test/libext/" includes="*.jar"/>
        <pathelement path="${testClasses}"/>

        <fileset dir="${dist.dir}/${lib.dir}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}/win32/" includes="*.jar *.zip"/>
      </classpath>

      <formatter type="xml"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.KettleEnvironmentTest" haltonerror="false" />
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.ConnectionPoolUtilIntegrationTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.DatabaseTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.SelectCountTests" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.SQLStatementParserTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.ReleaseSavePointTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.TablespaceDDLFragmentTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.VerticaDatabaseMetaTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.util.DatabaseUtilTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.row.ValueDataUtilTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.DatabaseConfigurationImportRuleTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.JobHasANoteImportRuleTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.TransformationHasANoteImportRuleTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.JobHasDescriptionImportRuleTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.TransformationHasDescriptionImportRuleTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.JobHasJobLogConfiguredImportRuleTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.TransformationHasTransLogConfiguredImportRuleTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.TransformationHasNoDisabledHopsImportRuleTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.imp.rule.JobHasNoDisabledHopsImportRuleTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.repository.KettleDatabaseRepositoryTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.repository.KettleFileRepositoryTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.repository.RepositoryImportExporterApiTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.repository.RepositoryUnitTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.logging.MetricsTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.parameters.ParameterSimpleTransTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.plugins.PluginRegistryTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.util.StringEvaluatorTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.vfs.VfsCoreTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.resource.NameResourceTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.resource.ResourceDependencyTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.resource.ResourceExportTest" haltonerror="false"/>
    </junit>

    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${testreports.html.dir}"/>
    </junitreport>

  </target>

  <!--
         ===========================================
             tests : junit transformation tests
         ============================================
    -->
  <target name="tests-trans" depends="compile-integration-tests" description="Execute the transformation tests">


    <junit printsummary="no" dir="${basedir}/${dist.dir}" fork="yes" forkmode="perTest"
           jvm="java" maxmemory="512M" showoutput="yes">
      <classpath>
        <fileset dir="${dist.dir}/${lib.dir}" includes="kettle-core*.jar,kettle-engine*.jar"/>
        <fileset dir="${dist.dir}/plugins/kettle-gpload-plugin/" includes="*.jar"/>
        <fileset dir="test/libext/" includes="*.jar"/>
        <pathelement path="${testClasses}"/>

        <fileset dir="${dist.dir}/${lib.dir}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}/win32/" includes="*.jar *.zip"/>
      </classpath>

      <formatter type="xml"/>

      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.HopTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.NormalExecutionTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.RowProducerTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.TransSingleThreadTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.TransMeta_PDI_13634_Test" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.WordCountSampleTest" haltonerror="false"/>

      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.addsequence.AddSequenceTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.append.AppendTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.blockingstep.BlockingStepTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.checksum.CheckSumTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.combinationlookup.CombinationLookupTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.constant.ConstantTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.cubeinput.CubeInputStepIntTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.calculator.CalculatorTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.csvinput.CsvInput1Test"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.csvinput.CsvInput2Test"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.csvinput.CsvInput1NoTrailingSpaceTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.csvinput.CsvInput1TrailingSpaceTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}"
            name="org.pentaho.di.trans.steps.csvinput.CsvInput2TrailingSpacesThreeCharEnclosuresTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}"
            name="org.pentaho.di.trans.steps.csvinput.CsvInput2TrailingSpacesTwoCharEnclosuresTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.databaselookup.DatabaseLookupTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.detectlastrow.DetectLastRowStepTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.excelinput.JxlWorkBookTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.excelinput.OdsWorkBookTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.excelinput.PoiWorkBookTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.excelinput.StaxWorkBookTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.execsqlrow.ExecSQLRowTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.getxmldata.GetXMLDataTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.injector.InjectorTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.insertupdate.InsertUpdateTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.janino.JaninoStepTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.javafilter.JavaFilterTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.jsonoutput.JsonOutputTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.mailvalidator.MailValidationTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.mapping.RunMapping" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.mapping.MappingTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.mergerows.MergeRowsTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.metainject.MetaInjectTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.nullif.NullIfTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.numberrange.NumberRangeRuleTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.numberrange.NumberRangeSetTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.pentahoreporting.PentahoReportingOutputTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.regexeval.RegexEvalTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.rowgenerator.RowGeneratorTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.scriptvalues_mod.JavaScriptSpecialTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.scriptvalues_mod.JavaScriptStringTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.sort.SortRowsTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.sftpput.SFTPPutIntegrationTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.tableoutput.TableOutputTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.tableinput.TableInputTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.textfileinput.TextFileInputTests"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.textfileoutput.TextFileOutputTests"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.textfileoutput.TextFileOutputSplittingTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.unique.UniqueRowsTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.update.UpdateTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.valuemapper.ValueMapperTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.splitfieldtorows.SplitFieldToRowsTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.xsdvalidator.XsdValidatorIntTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.xslt.XsltTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.core.database.SequenceMetaTests" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.terafast.FastloadControlBuilderTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.gpload.GPLoadTest"
            haltonerror="false"/>
    	<test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.rest.RestInputTest"
    	            haltonerror="false"/>
    </junit>
    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${testreports.html.dir}"/>
    </junitreport>
  </target>

  <!--
    ===========================================
       tests : junit black box tests
    ============================================
  -->
  <target name="tests-blackbox" depends="compile-integration-tests"
          description="Execute the black box transformation tests">

    <junit printsummary="no" dir="${basedir}/${dist.dir}" fork="yes" forkmode="perTest"
           jvm="java" maxmemory="512M" showoutput="yes">
      <classpath>
        <fileset dir="${dist.dir}/${lib.dir}" includes="kettle-core*.jar,kettle-engine*.jar"/>
        <fileset dir="test/libext/" includes="*.jar"/>
        <pathelement path="${testClasses}"/>
        <pathelement path="${dist.dir}/testfiles"/>
        <fileset dir="${dist.dir}/${lib.dir}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}/win32/" includes="*.jar *.zip"/>
      </classpath>

      <formatter type="xml"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.job.JobTrackerExecutionTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.job.SimultaneousJobsAppenderTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.job.SimpleEvalNullFieldTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.tablecompare.TableCompareTest" haltonerror="false" />
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.blackbox.BlackBoxTests" haltonerror="false" />
    </junit>
    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${testreports.html.dir}"/>
    </junitreport>

  </target>

  <!--
         ===========================================
            tests : junit run tests
         ============================================
    -->

  <target name="tests-run" depends="compile-integration-tests" description="Execute the transformation run tests">

    <junit printsummary="no" dir="${basedir}/${dist.dir}" fork="yes" forkmode="perTest"
           jvm="java" maxmemory="512M" showoutput="yes">
      <classpath>
        <fileset dir="${dist.dir}/${lib.dir}" includes="kettle-core*.jar,kettle-engine*.jar"/>
        <fileset dir="test/libext/" includes="*.jar"/>
        <pathelement path="${testClasses}"/>

        <fileset dir="${dist.dir}/${lib.dir}" includes="*.jar"/>
        <fileset dir="${dist.dir}/${libswt}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}/win32/" includes="*.jar *.zip"/>
      </classpath>

      <formatter type="xml"/>

      <test todir="${testreports.xml.dir}" name="org.pentaho.di.cluster.CarteLauncherTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.cluster.MasterSlaveTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.cluster.PartitioningTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.cluster.SlaveSequenceTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.trans.steps.concatfields.ConcatFields_PDI_10856_Test" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.www.CarteTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.job.entries.sftp.SFTPClientTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.job.entries.sftp.JobEntrySFTPTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.job.entries.ftpsget.FTPSConnectionTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.job.entries.ftpsget.JobEntryFTPSGetTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.job.entries.ftpput.JobEntryFTPPUTTest" haltonerror="false"/>

      <!-- Some extra things to run -->
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.job.entries.copyfiles.CopyFilesTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.job.entries.trans.JobEntryTransIntTest"
            haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.kitchen.KitchenTest" haltonerror="false"/>
      <test todir="${testreports.xml.dir}" name="org.pentaho.di.www.TransformationMapTest" haltonerror="false"/>
    </junit>

    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${testreports.html.dir}"/>
    </junitreport>
  </target>

  <!--
  ===========================================
     tests : junit concurrency tests
  ============================================
  -->
  <target name="tests-concurrency" depends="compile-integration-tests" description="Execute the concurrency tests">

    <junit printsummary="no" dir="${basedir}/${dist.dir}" fork="yes" forkmode="perTest"
           jvm="java" maxmemory="512M" showoutput="yes">
      <classpath>
        <fileset dir="${dist.dir}/${lib.dir}" includes="kettle-core*.jar,kettle-engine*.jar"/>
        <fileset dir="test/libext/" includes="*.jar"/>
        <pathelement path="${testClasses}"/>
        <pathelement path="${dist.dir}/testfiles"/>
        <fileset dir="${dist.dir}/${lib.dir}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}" includes="*.jar *.zip"/>
        <fileset dir="${dist.dir}/${libswt}/win32/" includes="*.jar *.zip"/>
      </classpath>

      <formatter type="xml"/>

      <batchtest todir="${testreports.xml.dir}" haltonerror="false">
        <fileset dir="${testsrc.dir}">
          <include name="org/pentaho/di/concurrency/**/*Test.java"/>
        </fileset>
      </batchtest>
    </junit>

    <junitreport todir="${testreports.html.dir}">
      <fileset dir="${testreports.xml.dir}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${testreports.html.dir}"/>
    </junitreport>

  </target>

  <!--
    =============================================================================
       checkstyle.xml-report : Produces machine-readable xml Checkstyle report
    =============================================================================
  -->
  <target name="checkstyle.xml-report" depends="install-ivy">
    <delete dir="${checkstyle.reports.dir}/xml"/>

    <mkdir dir="${checkstyle.dir}/lib"/>
    <ivy-resolve directory="${checkstyle.lib.dir}" ivyfile="${ivyfile}" conf="checkstyle"/>

    <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties">
      <classpath>
        <fileset dir="${checkstyle.lib.dir}" includes="*.jar"/>
      </classpath>
    </taskdef>

    <get usetimestamp="true" src="${checkstyle.config.url}" dest="${checkstyle.config.file}"/>
    <get usetimestamp="true" src="${checkstyle.suppressions.url}" dest="${checkstyle.suppressions.file}"/>

    <mkdir dir="${checkstyle.reports.dir}/xml"/>
    <for list="${module.list}" param="module" trim="true">
      <sequential>
        <checkstyle config="${checkstyle.config.file}" failonviolation="false">
          <property key="samedir" value="${checkstyle.dir}"/>
          <fileset dir="@{module}/src" includes="**/*.java"/>
          <fileset dir="@{module}/test-src" includes="**/*.java" erroronmissingdir="false"/>
          <formatter type="xml" tofile="${checkstyle.reports.dir}/xml/@{module}-checkstyle-result.xml"/>
        </checkstyle>
      </sequential>
    </for>
    <for list="${plugin.list}" param="plugin" trim="true">
      <sequential>
        <checkstyle config="${checkstyle.config.file}" failonviolation="false">
          <property key="samedir" value="${checkstyle.dir}"/>
          <fileset dir="plugins/@{plugin}/src" includes="**/*.java"/>
          <fileset dir="plugins/@{plugin}/test-src" includes="**/*.java" erroronmissingdir="false"/>
          <formatter type="xml" tofile="${checkstyle.reports.dir}/xml/@{plugin}-checkstyle-result.xml"/>
        </checkstyle>
      </sequential>
    </for>
  </target>

  <!--
    ==============================================================================
       checkstyle.html-report :  Produces human-readable html Checkstyle report
    ==============================================================================
  -->
  <target name="checkstyle.html-report" depends="checkstyle.xml-report">
    <delete dir="${checkstyle.reports.dir}/html"/>
    <mkdir dir="${checkstyle.reports.dir}/html"/>
    <xslt style="${checkstyle.stylesheet.file}" basedir="${checkstyle.reports.dir}/xml"
          includes="*-checkstyle-result.xml" destdir="${checkstyle.reports.dir}/html"/>
  </target>
</project>
